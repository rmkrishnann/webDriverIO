"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const cleanup_total_1 = __importDefault(require("./cleanup-total"));
class CleanupTotalService {
    /**
     * `serviceOptions` contains all options specific to the service
     * e.g. if defined as follows:
     *
     * ```
     * services: [['custom', { foo: 'bar' }]]
     * ```
     *
     * the `serviceOptions` parameter will be: `{ foo: 'bar' }`
     */
    constructor(serviceOptions, capabilities, config, browser) {
        this.browser = browser;
        this._serviceOptions = serviceOptions;
    }
    before(config, capabilities) {
        // Before all hook
    }
    beforeTest(test, context) {
        cleanup_total_1.default.initialize();
    }
    beforeScenario(test, context) {
        cleanup_total_1.default.initialize();
    }
    afterTest(test, context, { error, result, duration, passed, retries }) {
        return __awaiter(this, void 0, void 0, function* () {
            yield cleanup_total_1.default.finalize(this._serviceOptions);
        });
    }
    afterScenario({ result }) {
        return __awaiter(this, void 0, void 0, function* () {
            yield cleanup_total_1.default.finalize(this._serviceOptions);
        });
    }
    after(exitCode, config, capabilities) {
        return __awaiter(this, void 0, void 0, function* () {
        });
    }
}
exports.default = CleanupTotalService;
