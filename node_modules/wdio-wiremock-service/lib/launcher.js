"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WiremockLauncher = void 0;
const fs_1 = require("fs");
const child_process_1 = require("child_process");
const tcp_port_used_1 = require("tcp-port-used");
const wiremock_1 = require("./wiremock");
const plugin_1 = require("./plugin");
class WiremockLauncher extends plugin_1.Plugin {
    constructor(options = {}, capabilities, config) {
        super(options, capabilities, config);
    }
    onPrepare() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!(0, fs_1.existsSync)(this.binPath) && !this.skipWiremockInstall) {
                try {
                    yield wiremock_1.WireMock.download(this.url, this.binPath);
                }
                catch (error) {
                    throw new Error(`Downloading WireMock jar from Maven Central failed: ${error}\n`);
                }
            }
            this.process = (0, child_process_1.spawn)('java', this.args, { detached: true });
            if (!this.silent && this.process.stdout && this.process.stderr) {
                this.process.stdout.pipe(process.stdout);
                this.process.stderr.pipe(process.stderr);
            }
            this.process.on('exit', () => {
                process.stdout.write(`Wiremock exited\n\n`);
            });
            if (this.watchMode) {
                process.on('SIGINT', () => this.stopProcess(this.port));
                process.on('exit', () => this.stopProcess(this.port));
                process.on('uncaughtException', () => this.stopProcess(this.port));
            }
            yield (0, tcp_port_used_1.waitUntilUsed)(this.port, 100, 10000);
        });
    }
    onComplete() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.watchMode) {
                yield this.stopProcess(this.port);
            }
        });
    }
    stopProcess(port) {
        var _a, _b;
        return __awaiter(this, void 0, void 0, function* () {
            if (!((_a = this.process) === null || _a === void 0 ? void 0 : _a.killed)) {
                (_b = this.process) === null || _b === void 0 ? void 0 : _b.kill();
            }
            yield (0, tcp_port_used_1.waitUntilFree)(port, 100, 10000);
        });
    }
}
exports.WiremockLauncher = WiremockLauncher;
