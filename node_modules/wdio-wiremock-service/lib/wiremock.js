"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WireMock = void 0;
const fs_1 = require("fs");
const https_1 = require("https");
class WireMock {
    static download(from, to) {
        return __awaiter(this, void 0, void 0, function* () {
            this.logDownloadMessage(from);
            const res = yield this.httpRequest(from);
            return this.writeData(res, to);
        });
    }
    static writeData(data, to) {
        return new Promise((resolve, reject) => {
            data.pipe((0, fs_1.createWriteStream)(to));
            data.on('end', () => resolve());
            data.on('error', () => reject(new Error('Could not write to ' + to)));
        });
    }
    static logDownloadMessage(url) {
        process.stdout.write(`Downloading WireMock standalone from Maven Central...\n  ${url}\n`);
    }
    static httpRequest(url) {
        return new Promise((resolve, reject) => {
            const req = (0, https_1.get)(url, (res) => {
                if (res.statusCode !== 200) {
                    return reject(new Error('statusCode=' + res.statusCode));
                }
                return resolve(res);
            });
            req.on('error', (err) => {
                reject(err);
            });
            req.end();
        });
    }
}
exports.WireMock = WireMock;
